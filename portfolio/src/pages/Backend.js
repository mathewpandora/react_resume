import React, { useState, useEffect } from "react";
import "./Backend.css"; // Импортируем стили

const backendText = `
Основной стек

FastAPI (приоритетный инструмент)
Наиболее комфортный фреймворк, используемый в новых проектах
* Работа с аутентификацией: JWT (access/refresh), OAuth2, кастомные системы доступа
* Защищенные эндпоинты с многоуровневой валидацией прав
* Оптимизированные Pydantic-схемы для сложных структур данных
* Асинхронное взаимодействие с БД (SQLAlchemy 2.0+ async)
* Интеграция внешних API (платежи, микросервисы)
* Кастомные исключения и логирование операций
* Кеширование через Redis (базовое использование)
* Работа с Websockets для real-time функционала
* Применение админ-решений для администрирования

Flask (наибольший практический опыт)
Использовался в большинстве коммерческих проектов
* Разработка  REST API
* Комплексные системы авторизации (JWT + кастомные проверки)
* Интеграция с  БД (MySQL, flask sqlalchemy)
* Оптимизация запросов и пагинация больших данных
* Применение админ-решений для администрирования

Django/DRF (в процессе изучения):
* Создание моделей
* Django ORM (базовые запросы)
* DRF сериализаторы
* Generic-вьюхи

Опыт работы

РЭУ Им. Г.В. Плеханова, младший техник
* Разработка внутренних сервисов для автоматизации аудиторской деятельности
* Создание серверов-прослоек для взаимодействия между:
    * Legacy-системами предприятия
    * Внешними CRM/ERP решениями
* Оптимизация существующих API (сокращение времени ответа на 40%)
* Реализация сложной бизнес-логики с учетом отраслевых требований
* Разработка системы безопасного обмена документами
* Участие в полном цикле: проектирование → реализация → тестирование → деплой

Дополнительные технологии
* Базы данных: MySql,
* Redis
* Инфраструктура: Docker, Linux-сервера
* Инструменты: Git, Postman, Swagger, Sentry
`;

const Backend = () => {
    const [text, setText] = useState(""); // Храним текущий текст
    const [index, setIndex] = useState(0); // Текущая позиция в тексте

    useEffect(() => {
        if (index < backendText.length) {
            const timeout = setTimeout(() => {
                setText((prev) => prev + backendText[index]); // Добавляем символ
                setIndex((prev) => prev + 1);
            }, 20); // Скорость печати (чем меньше, тем быстрее)
            return () => clearTimeout(timeout);
        }
    }, [index]);

    return (
        <div className="pdf-container2">
            <pre className="pdf-content2">{text}</pre>
        </div>
    );
};

export default Backend;
